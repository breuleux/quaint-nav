
require:
   path
   fs
   quaint ->
      SeqDocument

provide:
   dump-nav


defaults = {
   nav-class-prefix = "nav-"
   dropdown-class = "dropdown"
   dropdown-menu-class = "dropdown-menu"
   suppress-empty-nav = false
   wrap-dropdown{title} = div % title
   wrap-element{match x} =
      String? ->
         div % x
      else ->
         x
}


clean{match a} =
   Array? ->
      rval = a each entry when not R"^[ \n]*$"? entry ->
         entry
      match rval:
         {x} -> clean{x}
         else -> rval
   R"^[ \n]*$"? ->
      ""
   else ->
      a


class NavFunctions:

   constructor{@options} =
      pass

   transform{orig and clean! match, li-tags, li-props} =
      "" -> ""
      {title, [ul %]? list} ->
         ENode{li-tags ++ {"." + @options.dropdown-class}, li-props} with {
            @options.wrap-dropdown{title}
            ENode{
               list.tags ++ {"." + @options.dropdown-menu-class}
               list.props
               list.children each
                  [li %]? child ->
                     @transform{child.children, child.tags, child.props}
                  other ->
                     @transform{other, {"li"}, {=}}
            }
         }
      {tags => {"ul"}, => children} ->
         children each
            [li %]? child ->
               @transform{child.children, child.tags, child.props}
            other ->
               @transform{other, {"li"}, {=}}
      ;; Array? or String? ->
      ;;    ENode{li-tags, li-props, div % orig}
      else ->
         ENode{li-tags, li-props, @options.wrap-element{orig}}


dump-nav{engine, position, options = {=}} =
   engine.deferred with {_, docs} ->
      entries = docs.nav.entries{} each
         {name, entry} when name === position -> entry
      if entries.length === 0 and options.suppress-empty-nav:
         return ""
      $nav %
         name = position
         ulonly = options.ulonly
         entries each entry ->
            $entry % engine.gen{entry}



install{@, _options} =

   options = defaults & _options
   nf = NavFunctions{options}

   @register-documents with {
      nav = SeqDocument{}
   }

   @register-components with {
      $nav{tags, props, children} =
         var contents = {}
         children each
            [$entry %]? {=> children} ->
               contents ++= Array! nf.transform{children, {"li"}, {=}}
            what ->
               contents ++= Array! nf.transform{what, {"li"}, {=}}
         if props.ulonly:
            ul % contents
         else:
            nav %
               class = options.nav-class-prefix + props.name
               id = options.nav-class-prefix + props.name
               ul %
                  contents
   }

   @register-macros with {
      nav{engine, _position = null, body} =
         position = if{_position, _position.raw{}, "main"}
         if body.raw{}.trim{} === "dump!":
            dump-nav{engine, position, options}
         else:
            engine.into{"nav"} with {position, body}
   }

main{*match} =
   {@, options = {=}} when @is-quaint-engine ->
      install{@, options}
   {options = {=}} ->
      {@} -> main{@, options}

provide = main

